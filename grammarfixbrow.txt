Terminals:
( ) null , && || ! true false + - * ** / % = ++ -- < > in " ' [ ] { } for : ; # if else while do break continue function return try catch finally throw class extends from import export as switch case default var let const delete /* */
Variables:
SS ALPHABET NUMBER OTHER SYNTAX VAR_FIRST ALPHANUM VAR VARIABLES NUMBERS STRING_WORD VALUE VARG BOOLEAN OP EXPRESSION RELATION STRING_WORD STRING ARRAY OBJECT OBJECT_CONTENT COMMENT IF_HEADER IF ELSEIF_HEADER ELSEIF ELSE WHILE_HEADER WHILE FOR_STEPS FOR_EXPRESSION FOR_HEADER FOR DOWHILE FORIN_EXPRESSION FORIN_HEADER FORIN FOROF_EXPRESSION FOROF_HEADER FOROF FUNCTION_NAME FUNCTION_HEADER FUNCTION_S FUNC_BODY FUNCTION RETURN IF_FUNC ELSEIF_FUNC ELSE_FUNC FOR_FUNC WHILE_FUNC DOWHILE_FUNC TRYCATCH_S TRY CATCH_HEADER CATCH FINALLY TRYCATCH THROW SWITCHCASE_S SWITCH_HEADER SWITCH CASE_HEADER CASE DEFAULT SWITCHCASE DELETE CLASS_HEADER CLASS_S CLASS IMPORT IMPORT_S EXPORT EXPORT_S EXPORT_S2 SERU DIVIDE HASHTAG PERSEN RBO RBC SBO SBC CBO CBC MUL MUL POW PLUS INCREMENT MIN DECREMENT COMMA PERIOD DIVIDE COLON SEMICOLON LESS EQUAL GREAT UNDERSCORE PETIK1 PETIK2 GRAVE NULLS ANDS ORS INS SERU TRUES FALSES FORS IFS ELSEIFS ELSES BREAKS CONTINUES WHILES DOS FUNCTIONS RETURNS CLASSS EXTENDS TRYS THROWS CATCHES FINALLYS FROMS IMPORTS EXPORTS ASS SWITCHES CASES VARS LETS CONSTS DEFAULTS DELETES DIVIDEMUL MULDIVIDE
Productions:
SS -> SS SS | IF | WHILE | DOWHILE | FOR | FORIN | FOROF | CLASS | FUNCTION | IMPORT | EXPORT | COMMENT | VARIABLES EQUAL VARG | VARIABLES OP EQUAL VARG | VAR EQUAL VARG | VAR EQUAL VARG | VARIABLES EQUAL NULLS | VAR EQUAL NULLS | VARIABLES EQUAL ARRAY | VAR EQUAL ARRAY | VARIABLES EQUAL OBJECT | VAR EQUAL OBJECT | VARIABLES EQUAL STRING | VAR EQUAL STRING | VARIABLES EQUAL BOOLEAN | VAR EQUAL BOOLEAN | TRYCATCH | THROW | SWITCHCASE | DELETE
ALPHABET -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
NUMBER -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
OTHER -> $ | & | . | ? | @ | \ | ^ | ` | ~ | SERU | HASHTAG | PERSEN | RBO | RBC | MUL | PLUS | MIN | COMMA | DIVIDE | COLON | LESS | EQUAL | GREAT | SBO | SBC | UNDERSCORE | CBO | CBC
SYNTAX -> NULLS | ANDS | ORS | INS | TRUES | FALSES | SERU | FORS | IFS | ELSEIFS | ELSES | WHILES | DOS | BREAKS | CONTINUES | FUNCTIONS | RETURNS | TRYS | CATCHES | FINALLYS | THROWS | CLASSS | FROMS | IMPORTS | EXPORTS | ASS | SWITCHES | CASES | DEFAULTS | VARS | LETS | CONSTS | DELETES
VAR_FIRST -> ALPHABET | UNDERSCORE
ALPHANUM -> ALPHANUM ALPHANUM | NUMBER | VAR_FIRST
VAR -> VAR_FIRST ALPHANUM | VAR_FIRST
VARIABLES -> VARS VAR | LETS VAR | CONSTS VAR
NUMBERS -> NUMBERS NUMBERS | NUMBER
STRING_WORD -> STRING_WORD STRING_WORD | ALPHABET | NUMBER | OTHER | SYNTAX
VALUE -> NUMBERS | BOOLEAN | STRING | ARRAY | OBJECT | FUNCTION | VARG OP VARG | RBO VARG RBC | NULLS
VARG -> VARG COMMA VARG | VALUE | VAR
BOOLEAN -> BOOLEAN ANDS BOOLEAN | BOOLEAN ORS BOOLEAN | SERU BOOLEAN | VARG RELATION VARG | TRUES | FALSES | RBO BOOLEAN RBC | VAR | NUMBERS | FUNCTION_NAME
OP -> PLUS | MIN | MUL | DIVIDE | POW | PERSEN
EXPRESSION -> BOOLEAN | RBO BOOLEAN RBC
RELATION -> GREAT EQUAL | LESS EQUAL | EQUAL EQUAL | EQUAL EQUAL EQUAL | SERU EQUAL | LESS | GREAT | INS | SERU INS
STRING_WORD -> STRING_WORD STRING_WORD | ALPHABET | NUMBER | OTHER | SYNTAX
STRING -> STRING STRING | PETIK2 STRING_WORD PETIK2 | PETIK1 STRING_WORD PETIK1 | GRAVE STRING_WORD GRAVE
ARRAY -> SBO VARG SBC | SBO SBC
OBJECT -> CBO CBC | CBO OBJECT_CONTENT CBC
OBJECT_CONTENT -> VARG COLON VARG | OBJECT_CONTENT COMMA OBJECT_CONTENT | VARG
COMMENT -> DIVIDEMUL STRING_WORD MULDIVIDE
IF_HEADER -> IFS EXPRESSION
IF -> IF_HEADER CBO SS CBC | IF ELIF | IF ELSE | IF_HEADER CBO BREAKS CBC | IF_HEADER CBO CONTINUES CBC
ELSEIF_HEADER -> ELSEIFS EXPRESSION
ELSEIF -> ELSEIF_HEADER CBO SS CBC | ELSEIF ELSE | ELSEIF_HEADER CBO BREAKS CBC | ELSEIF_HEADER CBO CONTINUES CBC
ELSE -> ELSES CBO SS CBC | ELSES CBO BREAKS CBC | ELSES CBO CONTINUES CBC
WHILE_HEADER -> WHILES EXPRESSION
WHILE -> WHILE_HEADER CBO SS CBC
FOR_STEPS -> INCREMENT | DECREMENT | OP EQUAL
FOR_EXPRESSION -> RBO VARIABLES EQUAL VARG SEMICOLON VAR RELATION SEMICOLON VAR FOR_STEPS RBC
FOR_HEADER -> FORS FOR_EXPRESSION
FOR -> FOR_HEADER CBO SS CBC
DOWHILE -> DOS CBO SS CBC WHILE_HEADER
FORIN_EXPRESSION -> RBO VARIABLES INS VARG RBC
FORIN_HEADER -> FORS FORIN_EXPRESSION
FORIN -> FORIN_HEADER CBO SS CBC
FOROF_EXPRESSION -> RBO VARIABLES INS VARG RBC
FOROF_HEADER -> FORS FOROF_EXPRESSION
FOROF -> FOROF_HEADER CBO SS CBC
FUNCTION_NAME -> VAR RBO VARG RBC | VAR RBO RBC
FUNCTION_HEADER -> FUNCTIONS FUNCTION_NAME
FUNCTION_S -> FUNCTION_S FUNCTION_S | FUNC_BODY
FUNC_BODY -> FUNC_BODY FUNC_BODY | IF_FUNC | FOR_FUNC | WHILE_FUNC | CLASS | FUNCTION | VARIABLES EQUAL VARG | VARIABLES OP EQUAL VARG | VAR EQUAL VARG | VAR EQUAL VARG | VARIABLES EQUAL NULLS | VAR EQUAL NULLS | VARIABLES EQUAL ARRAY | VAR EQUAL ARRAY | VARIABLES EQUAL OBJECT | VAR EQUAL OBJECT | VARIABLES EQUAL STRING | VAR EQUAL STRING | VARIABLES EQUAL BOOLEAN | VAR EQUAL BOOLEAN | RETURN | COMMENT | NULLS
FUNCTION -> FUNCTION_HEADER FUNCTION_S | FUNCTION_HEADER FUNC_BODY
RETURN -> RETURNS BOOLEAN | RETURNS VARG | RETURNS
IF_FUNC -> IF_HEADER FUNC_BODY | IF_FUNC ELSEIF_FUNC | IF_FUNC ELSE_FUNC
ELSEIF_FUNC -> ELSEIF_HEADER FUNC_BODY | ELSEIF_FUNC ELSEIF_FUNC | ELSEIF_FUNC ELSE_FUNC
ELSE_FUNC -> ELSES CBO FUNC_BODY CBC
FOR_FUNC -> FOR_HEADER CBO FUNC_BODY CBC
WHILE_FUNC -> WHILE_HEADER CBO FUNC_BODY CBC
DOWHILE_FUNC -> DOWHILE CBO FUNC_BODY CBC
TRYCATCH_S -> IF_FUNC | FOR_FUNC | WHILE_FUNC | CLASS | FUNCTION | VARIABLES EQUAL VARG | VARIABLES OP EQUAL VARG | VAR EQUAL VARG | VAR EQUAL VARG | VARIABLES EQUAL NULLS | VAR EQUAL NULLS | VARIABLES EQUAL ARRAY | VAR EQUAL ARRAY | VARIABLES EQUAL OBJECT | VAR EQUAL OBJECT | VARIABLES EQUAL STRING | VAR EQUAL STRING | VARIABLES EQUAL BOOLEAN | VAR EQUAL BOOLEAN | RETURN | COMMENT | NULLS
TRY -> TRYS CBO TRY_S CBC
CATCH_HEADER -> RBO VARG RBC
CATCH -> CATCHES CATCH_HEADER CBO TRYCATCH_S CBC
FINALLY -> FINALLYS CBO TRYCATCH_S CBC
TRYCATCH -> TRY CATCH | TRY FINALLY | TRY CATCH FINALLY
THROW -> THROWS EXPRESSION
SWITCHCASE_S -> IF_FUNC | FOR_FUNC | WHILE_FUNC | CLASS | FUNCTION | VARIABLES EQUAL VARG | VARIABLES OP EQUAL VARG | VAR EQUAL VARG | VAR EQUAL VARG | RETURN | COMMENT | NULLS
SWITCH_HEADER -> RBO EXPRESSION RBC
SWITCH -> SWITCHES SWITCH_HEADER
CASE_HEADER -> CASES VALUE COLON
CASE -> CASE_HEADER SWITCHCASE_S | CASE CASE
DEFAULT -> DEFAULTS COLON BREAKS
SWITCHCASE -> SWITCH CBO CASE CBC | SWITCH CBO CASE DEFAULT CBC | SWITCH CBO DEFAULT CBC
DELETE -> DELETES VAR PERIOD VAR | DELETES VAR SBO VAR SBC
CLASS_HEADER -> CLASSS VAR | CLASSS VAR EXTENDS VAR
CLASS_S -> CLASS_S CLASS_S | IF | WHILE | FOR | CLASS | FUNCTION | VARIABLES EQUAL VARG | VARIABLES OP EQUAL VARG | VAR EQUAL VARG | VAR EQUAL VARG | VARIABLES EQUAL NULLS | VAR EQUAL NULLS | VARIABLES EQUAL ARRAY | VAR EQUAL ARRAY | VARIABLES EQUAL OBJECT | VAR EQUAL OBJECT | VARIABLES EQUAL STRING | VAR EQUAL STRING | VARIABLES EQUAL BOOLEAN | VAR EQUAL BOOLEAN | COMMENT
CLASS -> CLASS_HEADER CBO CLASS_S CBC
IMPORT -> IMPORTS IMPORT_S FROM STRING_WORD | IMPORTS STRING_WORD
IMPORT_S -> VAR | MUL ASS VAR | OBJECT
EXPORT -> EXPORTS DEFAULTS EXPORT_S | EXPORTS EXPORT_S | EXPORTS EXPORT_S2 FROMS STRING_WORD
EXPORT_S -> VARIABLES | VARIABLES EQUAL VAR | FUNCTION | CLASS_HEADER | OBJECT
EXPORT_S2 -> MUL ASS VAR | MUL | OBJECT
SERU -> !
DIVIDE -> /
HASHTAG -> #
PERSEN -> %
RBO -> (
RBC -> )
SBO -> [
SBC -> ]
CBO -> {
CBC -> }
MUL -> *
POW -> **
PLUS -> +
INCREMENT -> ++
MIN -> -
DECREMENT -> --
COMMA -> ,
PERIOD -> .
COLON -> :
SEMICOLON -> ;
LESS -> <
EQUAL -> =
GREAT -> >
UNDERSCORE -> _
PETIK1 -> '
PETIK2 -> "
GRAVE -> `
NULLS -> null
ANDS -> & &
ORS -> or
INS -> in
TRUES -> true
FALSES -> false
FORS -> for
IFS -> if
ELSEIFS -> else if
ELSES -> else
BREAKS -> break
CONTINUES -> continue
WHILES -> while
DOS -> do
FUNCTIONS -> function
RETURNS -> return
CLASSS -> class
EXTENDS -> extends
TRYS -> try
THROWS -> throw
CATCHES -> catch
FINALLYS -> finally
FROMS -> from
IMPORTS -> import
EXPORTS -> export
ASS -> as
SWITCHES -> switch
CASES -> case
VARS -> var
LETS -> let
CONSTS -> const
DEFAULTS -> default
DELETES -> delete
DIVIDEMUL -> /*
MULDIVIDE -> */